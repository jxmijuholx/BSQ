BSQ

Mission:
    - Write a program that draws and prints
    the biggest possible square in the given area

----------------------------------------------------------------

Needs/wants/nice2know for this program:

    - The file containing THE MAP
    will be passed as an argument to our
    bsq program

    - The map is made of:
        - "empty" characters
        - lines
        - "obstacle" characters
    So the aim of the program is:
        to replace empty characters
        by 'full' characters
        -> the full characters represent
        the biggest square possible in the
        given area
        ------------------------------------
        so, we need to find the biggest square possible
        and fill it with characters to display it

    - The first line of the all mighty map
    contains info about itself
        - The number of line on the map
        - The 'empty' characters
        - The 'obstacle' character
        - The 'full' characters

    - Your program must handle 1 to n ->
    one to many files as parametres

    - When your program receives MORE THAN one
    maps in the argument, each solution
    must be followed by a line break
    or a 'map error' -message

    - If there is no arguments given
    the program must be able to read
    on the standard input

    - You must have a valid Makefile

----------------------------------------------------------------

  THE RULES OF THE ALL MIGHTY
                MAP
    
    1. All lines must have the same length!
    2. There's atleast ONE LINE of
        atleast ONE  BOX
    3. If (end of line)
            line break
    4. The characters named on the
        1st line of the map
        ARE THE ONLY CHARACTERS TO BE USED
        ON THE MAP
    5. Map === 'invalid' if
        a character is missing
        from the first line
        or if
        two characters are identical
    6. The characters can be ANY
        printable characters, even integers
    7. In case of an invalid map
        the program should display
        MAP ERROR on the error output
        followed by a line break
        -> your program will then move
        on to the next map

    • Here’s an example of how it should work :
    %>cat example_file
9.ox
...........................
....o......................
............o..............
...........................
....o......................
...............o...........
...........................
......o..............o.....
..o.......o................

%>./bsq example_file
.....xxxxxxx...............
....oxxxxxxx...............
.....xxxxxxxo..............
.....xxxxxxx...............
....oxxxxxxx...............
.....xxxxxxx...o...........
.....xxxxxxx...............
......o..............o.....
..o.......o................
%>

This example explained:
 - 9 lines which is basically the HEIGHT
 - . is the character used to draw empty
 - o are the obstacles
 - x is the char for the square
 - So what is representing the width?
 -> we probably have to calculate it ourselves by
 reading the map and storing the count of characters
 on each line on it's own variable
 -> int x = the length of the 2nd line in the map

----------------------------------------------------------------

SO WHAT MAKES THIS PROJECT HARD

1. The algorithm is hard
2. The arguments our program reads
    - all file/files that we
    need to use to read the square
    -> we plan, decide and implement
3. Only few external libraries can be used:
    - Open()
    - Close()
    - Read()
    - Write()
    - Malloc()
    - Free()
    - Exit()
4. libft is not applicable


----------------------------------------------------------------

WHAT DID THE FULL STACK MACHINE SAY?

---> Use pascal's pyramid :3 hihi uWu